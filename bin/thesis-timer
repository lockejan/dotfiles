#!/bin/python

from datetime import date, datetime
from math import floor
import pandas as pd

weekly_events = pd.DataFrame({
    "Topic": ["sipgate",
              "day-off"],
    "Days": [2,
             1]
})

# 9.5 days remaining for holiday
single_events = pd.DataFrame({
    "Topic": ["working holiday"],
    "Start": [date(2020, 8, 18)],
    "Days": [9]
})


def get_time_till_due_date():
    now = date.today()
    due = date(2021, 1, 15)
    # due = date(2021, 2, 16)
    delta = due - now
    return delta


def get_full_weeks_of(delta):
    return floor(delta.days/7)


def get_days_off_for_current_week():
    # workdays(Tue, Fri), sundays per week; mon=0
    today = datetime.today().weekday()
    if today <= 1:
        return 3
    elif today >= 1 and today <= 4:
        return 2
    elif today >= 4:
        return 1


def get_total_days_off(remaining_time):
    days_off_till_due_date = weekly_events['Days'].sum() * \
        get_full_weeks_of(remaining_time)
    return days_off_till_due_date + get_days_off_for_current_week()


def get_workdays_for_thesis():
    remaining_time = get_time_till_due_date()
    effective_remaining = remaining_time.days - \
        get_total_days_off(remaining_time)
    return (effective_remaining, remaining_time.days)


def get_days_till_due_date():
    effective, remaining = get_workdays_for_thesis()
    return print(f"ÔÜù  {remaining} days")


if __name__ == "__main__":
    get_days_till_due_date()
